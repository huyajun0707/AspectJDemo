package com.example.library.daodb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.library.entity.TraceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACE_INFO".
*/
public class TraceInfoDao extends AbstractDao<TraceInfo, Long> {

    public static final String TABLENAME = "TRACE_INFO";

    /**
     * Properties of entity TraceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppVersion = new Property(1, String.class, "appVersion", false, "APP_VERSION");
        public final static Property BuryingPointType = new Property(2, String.class, "buryingPointType", false, "BURYING_POINT_TYPE");
        public final static Property BusiExt = new Property(3, String.class, "busiExt", false, "BUSI_EXT");
        public final static Property ButtonDesc = new Property(4, String.class, "buttonDesc", false, "BUTTON_DESC");
        public final static Property ButtonId = new Property(5, String.class, "buttonId", false, "BUTTON_ID");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property PageDesc = new Property(8, String.class, "pageDesc", false, "PAGE_DESC");
        public final static Property PageId = new Property(9, String.class, "pageId", false, "PAGE_ID");
        public final static Property InputId = new Property(10, String.class, "inputId", false, "INPUT_ID");
        public final static Property Input_desc = new Property(11, String.class, "input_desc", false, "INPUT_DESC");
        public final static Property Input_value = new Property(12, String.class, "input_value", false, "INPUT_VALUE");
        public final static Property Choose_id = new Property(13, String.class, "choose_id", false, "CHOOSE_ID");
        public final static Property Choose_desc = new Property(14, String.class, "choose_desc", false, "CHOOSE_DESC");
        public final static Property Choose_value = new Property(15, String.class, "choose_value", false, "CHOOSE_VALUE");
        public final static Property Start_time = new Property(16, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(17, String.class, "end_time", false, "END_TIME");
        public final static Property Duration = new Property(18, long.class, "duration", false, "DURATION");
    }


    public TraceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TraceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_VERSION\" TEXT," + // 1: appVersion
                "\"BURYING_POINT_TYPE\" TEXT," + // 2: buryingPointType
                "\"BUSI_EXT\" TEXT," + // 3: busiExt
                "\"BUTTON_DESC\" TEXT," + // 4: buttonDesc
                "\"BUTTON_ID\" TEXT," + // 5: buttonId
                "\"CREATE_TIME\" TEXT," + // 6: createTime
                "\"MOBILE\" TEXT," + // 7: mobile
                "\"PAGE_DESC\" TEXT," + // 8: pageDesc
                "\"PAGE_ID\" TEXT," + // 9: pageId
                "\"INPUT_ID\" TEXT," + // 10: inputId
                "\"INPUT_DESC\" TEXT," + // 11: input_desc
                "\"INPUT_VALUE\" TEXT," + // 12: input_value
                "\"CHOOSE_ID\" TEXT," + // 13: choose_id
                "\"CHOOSE_DESC\" TEXT," + // 14: choose_desc
                "\"CHOOSE_VALUE\" TEXT," + // 15: choose_value
                "\"START_TIME\" TEXT," + // 16: start_time
                "\"END_TIME\" TEXT," + // 17: end_time
                "\"DURATION\" INTEGER NOT NULL );"); // 18: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TraceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(2, appVersion);
        }
 
        String buryingPointType = entity.getBuryingPointType();
        if (buryingPointType != null) {
            stmt.bindString(3, buryingPointType);
        }
 
        String busiExt = entity.getBusiExt();
        if (busiExt != null) {
            stmt.bindString(4, busiExt);
        }
 
        String buttonDesc = entity.getButtonDesc();
        if (buttonDesc != null) {
            stmt.bindString(5, buttonDesc);
        }
 
        String buttonId = entity.getButtonId();
        if (buttonId != null) {
            stmt.bindString(6, buttonId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String pageDesc = entity.getPageDesc();
        if (pageDesc != null) {
            stmt.bindString(9, pageDesc);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(10, pageId);
        }
 
        String inputId = entity.getInputId();
        if (inputId != null) {
            stmt.bindString(11, inputId);
        }
 
        String input_desc = entity.getInput_desc();
        if (input_desc != null) {
            stmt.bindString(12, input_desc);
        }
 
        String input_value = entity.getInput_value();
        if (input_value != null) {
            stmt.bindString(13, input_value);
        }
 
        String choose_id = entity.getChoose_id();
        if (choose_id != null) {
            stmt.bindString(14, choose_id);
        }
 
        String choose_desc = entity.getChoose_desc();
        if (choose_desc != null) {
            stmt.bindString(15, choose_desc);
        }
 
        String choose_value = entity.getChoose_value();
        if (choose_value != null) {
            stmt.bindString(16, choose_value);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(17, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(18, end_time);
        }
        stmt.bindLong(19, entity.getDuration());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TraceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(2, appVersion);
        }
 
        String buryingPointType = entity.getBuryingPointType();
        if (buryingPointType != null) {
            stmt.bindString(3, buryingPointType);
        }
 
        String busiExt = entity.getBusiExt();
        if (busiExt != null) {
            stmt.bindString(4, busiExt);
        }
 
        String buttonDesc = entity.getButtonDesc();
        if (buttonDesc != null) {
            stmt.bindString(5, buttonDesc);
        }
 
        String buttonId = entity.getButtonId();
        if (buttonId != null) {
            stmt.bindString(6, buttonId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String pageDesc = entity.getPageDesc();
        if (pageDesc != null) {
            stmt.bindString(9, pageDesc);
        }
 
        String pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindString(10, pageId);
        }
 
        String inputId = entity.getInputId();
        if (inputId != null) {
            stmt.bindString(11, inputId);
        }
 
        String input_desc = entity.getInput_desc();
        if (input_desc != null) {
            stmt.bindString(12, input_desc);
        }
 
        String input_value = entity.getInput_value();
        if (input_value != null) {
            stmt.bindString(13, input_value);
        }
 
        String choose_id = entity.getChoose_id();
        if (choose_id != null) {
            stmt.bindString(14, choose_id);
        }
 
        String choose_desc = entity.getChoose_desc();
        if (choose_desc != null) {
            stmt.bindString(15, choose_desc);
        }
 
        String choose_value = entity.getChoose_value();
        if (choose_value != null) {
            stmt.bindString(16, choose_value);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(17, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(18, end_time);
        }
        stmt.bindLong(19, entity.getDuration());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TraceInfo readEntity(Cursor cursor, int offset) {
        TraceInfo entity = new TraceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appVersion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // buryingPointType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // busiExt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buttonDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // buttonId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pageDesc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pageId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // inputId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // input_desc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // input_value
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // choose_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // choose_desc
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // choose_value
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // start_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // end_time
            cursor.getLong(offset + 18) // duration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TraceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuryingPointType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBusiExt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setButtonDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setButtonId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPageDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPageId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInputId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInput_desc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInput_value(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setChoose_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChoose_desc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChoose_value(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStart_time(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEnd_time(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDuration(cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TraceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TraceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TraceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
